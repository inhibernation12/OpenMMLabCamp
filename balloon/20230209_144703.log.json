{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon_dataset/train.json',\n        img_prefix='data/balloon_dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon_dataset/val.json',\n        img_prefix='data/balloon_dataset/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=25, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/HOME/scz0apw/run/mmdetection/checkpoints/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'work/mask_rcnn_r50_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1333159851, "exp_name": "mask_rcnn_r50_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.001, "bbox_mAP": 0.0632, "bbox_mAP_50": 0.0963, "bbox_mAP_75": 0.0698, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0363, "bbox_mAP_l": 0.0984, "bbox_mAP_copypaste": "0.0632 0.0963 0.0698 0.0000 0.0363 0.0984", "segm_mAP": 0.0789, "segm_mAP_50": 0.0943, "segm_mAP_75": 0.0924, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0418, "segm_mAP_l": 0.3687, "segm_mAP_copypaste": "0.0789 0.0943 0.0924 0.0000 0.0418 0.3687"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5469, "bbox_mAP_50": 0.742, "bbox_mAP_75": 0.7029, "bbox_mAP_s": 0.0039, "bbox_mAP_m": 0.3197, "bbox_mAP_l": 0.6328, "bbox_mAP_copypaste": "0.5469 0.7420 0.7029 0.0039 0.3197 0.6328", "segm_mAP": 0.6484, "segm_mAP_50": 0.7366, "segm_mAP_75": 0.7336, "segm_mAP_s": 0.0026, "segm_mAP_m": 0.332, "segm_mAP_l": 0.7997, "segm_mAP_copypaste": "0.6484 0.7366 0.7336 0.0026 0.3320 0.7997"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6399, "bbox_mAP_50": 0.8433, "bbox_mAP_75": 0.8361, "bbox_mAP_s": 0.0151, "bbox_mAP_m": 0.5207, "bbox_mAP_l": 0.7032, "bbox_mAP_copypaste": "0.6399 0.8433 0.8361 0.0151 0.5207 0.7032", "segm_mAP": 0.7693, "segm_mAP_50": 0.8385, "segm_mAP_75": 0.837, "segm_mAP_s": 0.0098, "segm_mAP_m": 0.591, "segm_mAP_l": 0.8552, "segm_mAP_copypaste": "0.7693 0.8385 0.8370 0.0098 0.5910 0.8552"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6304, "bbox_mAP_50": 0.8402, "bbox_mAP_75": 0.8327, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.5553, "bbox_mAP_l": 0.6801, "bbox_mAP_copypaste": "0.6304 0.8402 0.8327 0.0505 0.5553 0.6801", "segm_mAP": 0.7611, "segm_mAP_50": 0.8391, "segm_mAP_75": 0.834, "segm_mAP_s": 0.0236, "segm_mAP_m": 0.6161, "segm_mAP_l": 0.8398, "segm_mAP_copypaste": "0.7611 0.8391 0.8340 0.0236 0.6161 0.8398"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6472, "bbox_mAP_50": 0.849, "bbox_mAP_75": 0.8021, "bbox_mAP_s": 0.0842, "bbox_mAP_m": 0.5657, "bbox_mAP_l": 0.6968, "bbox_mAP_copypaste": "0.6472 0.8490 0.8021 0.0842 0.5657 0.6968", "segm_mAP": 0.7634, "segm_mAP_50": 0.8454, "segm_mAP_75": 0.8411, "segm_mAP_s": 0.0213, "segm_mAP_m": 0.6239, "segm_mAP_l": 0.8383, "segm_mAP_copypaste": "0.7634 0.8454 0.8411 0.0213 0.6239 0.8383"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6906, "bbox_mAP_50": 0.8535, "bbox_mAP_75": 0.8458, "bbox_mAP_s": 0.0631, "bbox_mAP_m": 0.5929, "bbox_mAP_l": 0.7433, "bbox_mAP_copypaste": "0.6906 0.8535 0.8458 0.0631 0.5929 0.7433", "segm_mAP": 0.7732, "segm_mAP_50": 0.8483, "segm_mAP_75": 0.8483, "segm_mAP_s": 0.0213, "segm_mAP_m": 0.6361, "segm_mAP_l": 0.8441, "segm_mAP_copypaste": "0.7732 0.8483 0.8483 0.0213 0.6361 0.8441"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7286, "bbox_mAP_50": 0.865, "bbox_mAP_75": 0.8612, "bbox_mAP_s": 0.2272, "bbox_mAP_m": 0.6327, "bbox_mAP_l": 0.7793, "bbox_mAP_copypaste": "0.7286 0.8650 0.8612 0.2272 0.6327 0.7793", "segm_mAP": 0.7867, "segm_mAP_50": 0.8612, "segm_mAP_75": 0.8612, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.6366, "segm_mAP_l": 0.8546, "segm_mAP_copypaste": "0.7867 0.8612 0.8612 0.0337 0.6366 0.8546"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7066, "bbox_mAP_50": 0.8784, "bbox_mAP_75": 0.8633, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.5956, "bbox_mAP_l": 0.7628, "bbox_mAP_copypaste": "0.7066 0.8784 0.8633 0.2020 0.5956 0.7628", "segm_mAP": 0.7854, "segm_mAP_50": 0.8746, "segm_mAP_75": 0.8746, "segm_mAP_s": 0.0413, "segm_mAP_m": 0.6451, "segm_mAP_l": 0.8477, "segm_mAP_copypaste": "0.7854 0.8746 0.8746 0.0413 0.6451 0.8477"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7249, "bbox_mAP_50": 0.8861, "bbox_mAP_75": 0.8812, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6441, "bbox_mAP_l": 0.7742, "bbox_mAP_copypaste": "0.7249 0.8861 0.8812 0.4040 0.6441 0.7742", "segm_mAP": 0.7986, "segm_mAP_50": 0.8812, "segm_mAP_75": 0.8812, "segm_mAP_s": 0.0649, "segm_mAP_m": 0.6621, "segm_mAP_l": 0.8606, "segm_mAP_copypaste": "0.7986 0.8812 0.8812 0.0649 0.6621 0.8606"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7485, "bbox_mAP_50": 0.8895, "bbox_mAP_75": 0.8895, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6636, "bbox_mAP_l": 0.8011, "bbox_mAP_copypaste": "0.7485 0.8895 0.8895 0.4040 0.6636 0.8011", "segm_mAP": 0.8046, "segm_mAP_50": 0.8824, "segm_mAP_75": 0.8824, "segm_mAP_s": 0.0568, "segm_mAP_m": 0.6704, "segm_mAP_l": 0.8678, "segm_mAP_copypaste": "0.8046 0.8824 0.8824 0.0568 0.6704 0.8678"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7509, "bbox_mAP_50": 0.9007, "bbox_mAP_75": 0.9007, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6629, "bbox_mAP_l": 0.7999, "bbox_mAP_copypaste": "0.7509 0.9007 0.9007 0.4040 0.6629 0.7999", "segm_mAP": 0.8126, "segm_mAP_50": 0.8857, "segm_mAP_75": 0.8857, "segm_mAP_s": 0.0577, "segm_mAP_m": 0.6769, "segm_mAP_l": 0.8723, "segm_mAP_copypaste": "0.8126 0.8857 0.8857 0.0577 0.6769 0.8723"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7588, "bbox_mAP_50": 0.8929, "bbox_mAP_75": 0.8929, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6586, "bbox_mAP_l": 0.8169, "bbox_mAP_copypaste": "0.7588 0.8929 0.8929 0.4040 0.6586 0.8169", "segm_mAP": 0.8063, "segm_mAP_50": 0.8835, "segm_mAP_75": 0.8835, "segm_mAP_s": 0.0649, "segm_mAP_m": 0.6727, "segm_mAP_l": 0.8672, "segm_mAP_copypaste": "0.8063 0.8835 0.8835 0.0649 0.6727 0.8672"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7646, "bbox_mAP_50": 0.8938, "bbox_mAP_75": 0.8835, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6519, "bbox_mAP_l": 0.825, "bbox_mAP_copypaste": "0.7646 0.8938 0.8835 0.4545 0.6519 0.8250", "segm_mAP": 0.8058, "segm_mAP_50": 0.8835, "segm_mAP_75": 0.8835, "segm_mAP_s": 0.0909, "segm_mAP_m": 0.6668, "segm_mAP_l": 0.8664, "segm_mAP_copypaste": "0.8058 0.8835 0.8835 0.0909 0.6668 0.8664"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7633, "bbox_mAP_50": 0.8933, "bbox_mAP_75": 0.8933, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6606, "bbox_mAP_l": 0.8217, "bbox_mAP_copypaste": "0.7633 0.8933 0.8933 0.4545 0.6606 0.8217", "segm_mAP": 0.8048, "segm_mAP_50": 0.8837, "segm_mAP_75": 0.8837, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.6588, "segm_mAP_l": 0.8729, "segm_mAP_copypaste": "0.8048 0.8837 0.8837 0.1347 0.6588 0.8729"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.001, "bbox_mAP": 0.751, "bbox_mAP_50": 0.894, "bbox_mAP_75": 0.894, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6479, "bbox_mAP_l": 0.8077, "bbox_mAP_copypaste": "0.7510 0.8940 0.8940 0.4545 0.6479 0.8077", "segm_mAP": 0.8021, "segm_mAP_50": 0.8842, "segm_mAP_75": 0.8842, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.653, "segm_mAP_l": 0.867, "segm_mAP_copypaste": "0.8021 0.8842 0.8842 0.1347 0.6530 0.8670"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7547, "bbox_mAP_50": 0.8949, "bbox_mAP_75": 0.8847, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6571, "bbox_mAP_l": 0.807, "bbox_mAP_copypaste": "0.7547 0.8949 0.8847 0.4545 0.6571 0.8070", "segm_mAP": 0.8079, "segm_mAP_50": 0.8847, "segm_mAP_75": 0.8847, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.6648, "segm_mAP_l": 0.869, "segm_mAP_copypaste": "0.8079 0.8847 0.8847 0.1347 0.6648 0.8690"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7588, "bbox_mAP_50": 0.8964, "bbox_mAP_75": 0.8853, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6681, "bbox_mAP_l": 0.8129, "bbox_mAP_copypaste": "0.7588 0.8964 0.8853 0.4040 0.6681 0.8129", "segm_mAP": 0.8105, "segm_mAP_50": 0.8853, "segm_mAP_75": 0.8853, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.661, "segm_mAP_l": 0.8749, "segm_mAP_copypaste": "0.8105 0.8853 0.8853 0.1347 0.6610 0.8749"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7636, "bbox_mAP_50": 0.8967, "bbox_mAP_75": 0.8967, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6567, "bbox_mAP_l": 0.821, "bbox_mAP_copypaste": "0.7636 0.8967 0.8967 0.4545 0.6567 0.8210", "segm_mAP": 0.8121, "segm_mAP_50": 0.8855, "segm_mAP_75": 0.8855, "segm_mAP_s": 0.202, "segm_mAP_m": 0.6619, "segm_mAP_l": 0.8749, "segm_mAP_copypaste": "0.8121 0.8855 0.8855 0.2020 0.6619 0.8749"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7581, "bbox_mAP_50": 0.8971, "bbox_mAP_75": 0.8857, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6544, "bbox_mAP_l": 0.8145, "bbox_mAP_copypaste": "0.7581 0.8971 0.8857 0.4545 0.6544 0.8145", "segm_mAP": 0.8091, "segm_mAP_50": 0.8857, "segm_mAP_75": 0.8857, "segm_mAP_s": 0.202, "segm_mAP_m": 0.6546, "segm_mAP_l": 0.874, "segm_mAP_copypaste": "0.8091 0.8857 0.8857 0.2020 0.6546 0.8740"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.001, "bbox_mAP": 0.762, "bbox_mAP_50": 0.8968, "bbox_mAP_75": 0.8968, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6755, "bbox_mAP_l": 0.8154, "bbox_mAP_copypaste": "0.7620 0.8968 0.8968 0.4040 0.6755 0.8154", "segm_mAP": 0.8077, "segm_mAP_50": 0.886, "segm_mAP_75": 0.886, "segm_mAP_s": 0.202, "segm_mAP_m": 0.6719, "segm_mAP_l": 0.8678, "segm_mAP_copypaste": "0.8077 0.8860 0.8860 0.2020 0.6719 0.8678"}
